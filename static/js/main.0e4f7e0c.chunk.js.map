{"version":3,"sources":["statewise/statewise.tsx","Model/districtModel.ts","Model/stateModel.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Statewise","stateDetails","this","props","states","value","field","header","sortable","filter","filterPlaceholder","expander","body","confirmedBodyTemplate","recoveredBodyTemplate","deceasedBodyTemplate","node","className","parseInt","data","deltaConfirmed","confirmed","deltaRecovered","recovered","deltaDeaths","deaths","console","log","React","districtModel","name","active","stateModel","App","state","overallDetails","districtDetails","fetch","then","res","json","Object","values","statewise","finalData","dataFormatterForTreeTable","setState","root","catch","stateCount","stateArr","forEach","stateObj","districtCount","districtArr","statecode","entries","districtData","districtDtls","districtObj","deceased","delta","tempObj","push","stateData","deltaconfirmed","deltarecovered","deltadeaths","splice","tempStateObj","shift","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0e4f7e0c.chunk.js","sourcesContent":["import * as React from 'react';\nimport {TreeTable} from 'primereact/treetable'\nimport { Column } from \"primereact/column\";\nimport * as Icon from 'react-feather';\nimport './statewise.css';\n\nclass Statewise extends React.Component<any, any>  {\n\n  public render() {\n    const stateDetails = this.props.states;\n    return (\n      <TreeTable value={stateDetails} >\n        <Column field=\"name\" header=\"State\" sortable filter={true} \n                filterPlaceholder={'State/District Name ...'} expander></Column>\n        <Column  header=\"C\" sortable body={this.confirmedBodyTemplate}>\n        </Column>\n        <Column field=\"active\" header=\"A\" sortable></Column>\n        <Column field=\"recovered\" header=\"R\" sortable body={this.recoveredBodyTemplate}></Column>\n        <Column field=\"deaths\" header=\"D\" sortable body={this.deceasedBodyTemplate}></Column>\n      </TreeTable>\n    );\n  }\n\npublic confirmedBodyTemplate(node: any) {\nreturn (\n<div className=\"overallDiv\">\n  <div className=\"deltaChangesDiv\">\n    <span className=\"iconConfirmed\">\n    {parseInt(node.data.deltaConfirmed) > 0 && <Icon.ArrowUp/>}\n    </span>\n    <span className=\"confirmed\">\n    {parseInt(node.data.deltaConfirmed) > 0 ? `${node.data.deltaConfirmed}` : ''}\n    </span>\n  </div>\n  <span>{node.data.confirmed}</span>\n</div>);\n}\n\npublic recoveredBodyTemplate(node: any) {\n  return (\n  <div className=\"overallDiv\">\n    <div className=\"deltaChangesDiv\">\n      <span className=\"iconRecovered\">\n      {parseInt(node.data.deltaRecovered) > 0 && <Icon.ArrowUp/>}\n      </span>\n      <span className=\"recovered\">\n      {parseInt(node.data.deltaRecovered) > 0 ? `${node.data.deltaRecovered}` : ''}\n      </span>\n    </div>\n    <span>{node.data.recovered}</span>\n  </div>);\n  }\n\npublic deceasedBodyTemplate(node: any) {\n  return (\n  <div className=\"overallDiv\">\n    <div className=\"deltaChangesDiv\">\n      <span className=\"iconDeceased\">\n      {parseInt(node.data.deltaDeaths) > 0 && <Icon.ArrowUp/>}\n      </span>\n      <span className=\"deceased\">\n      {parseInt(node.data.deltaDeaths) > 0 ? `${node.data.deltaDeaths}` : ''}\n      </span>\n    </div>\n    <span>{node.data.deaths}</span>\n  </div>);\n  }\n\n  public filterMethod(value: any, filter:any) {\n    console.log('value: '+ value + 'filter: ' + filter)\n  }\n}\n\nexport default Statewise;\n  ","class districtModel {\r\n    name: any;\r\n    active: any;\r\n    confirmed: any;\r\n    recovered: any;\r\n    deaths: any;\r\n    deltaConfirmed: any;\r\n    deltaRecovered: any;\r\n    deltaDeaths: any;\r\n\r\n    constructor(name: any, active: any, confirmed: any, recovered: any, deaths: any,\r\n        deltaConfirmed: any,  deltaRecovered: any,  deltaDeaths: any) {\r\n        this.name = name;\r\n        this.active = active;\r\n        this.confirmed = confirmed;\r\n        this.recovered = recovered;\r\n        this.deaths = deaths;\r\n        this.deltaConfirmed = deltaConfirmed;\r\n        this.deltaRecovered = deltaRecovered;\r\n        this.deltaDeaths = deltaDeaths;\r\n    }\r\n}\r\nexport default districtModel;","class stateModel {\r\n    name: any;\r\n    active: any;\r\n    confirmed: any;\r\n    recovered: any;\r\n    deaths: any;\r\n    deltaConfirmed: any;\r\n    deltaRecovered: any;\r\n    deltaDeaths: any;\r\n\r\n    constructor(name: any, active: any, confirmed: any, recovered: any,\r\n        deaths: any, deltaConfirmed: any,  deltaRecovered: any,  deltaDeaths: any) {\r\n        this.name = name;\r\n        this.active = active;\r\n        this.confirmed = confirmed;\r\n        this.recovered = recovered;\r\n        this.deaths = deaths;\r\n        this.deltaConfirmed = deltaConfirmed;\r\n        this.deltaRecovered = deltaRecovered;\r\n        this.deltaDeaths = deltaDeaths; \r\n    }\r\n}\r\nexport default stateModel;","import React, { Component } from 'react'\nimport './App.css';\nimport Statewise from './statewise/statewise';\nimport districtModel from './Model/districtModel';\nimport stateModel from './Model/stateModel';\n/* import axios from 'axios';\nimport stateModel from './Model/stateModel'; */\n\nclass App extends Component {\n\n  state = {\n    states: []\n  }\n  overallDetails: any;\n  stateDetails: any;\n  districtDetails: any;\n\ncomponentDidMount() {\n  // fetch('https://api.rootnet.in/covid19-in/unofficial/covid19india.org/statewise')\n  fetch('https://api.covid19india.org/data.json', \n      /* {\n        headers: {\n          'x-rapidapi-host' : 'corona-virus-world-and-india-data.p.rapidapi.com',\n          'x-rapidapi-key' : 'eee03be7famsh0a4c97bce963450p17deacjsnf3979d5d6296'\n        }\n      } */)\n  .then(res => res.json())\n  .then((data) => {\n    console.log(data);\n    this.stateDetails = Object.values(data.statewise);\n/*     const finalData = this.dataFormatterForTreeTable(Object.values(data.statewise));\n    this.setState({ states: finalData.root }) */\n    fetch('https://api.covid19india.org/state_district_wise.json')\n    .then( res => res.json())\n    .then((data) => {\n      this.districtDetails = Object.values(data);\n    const finalData = this.dataFormatterForTreeTable(this.stateDetails, this.districtDetails);\n    this.setState({ states: finalData.root }) \n    })\n  })\n  .catch(console.log)\n// this.getTreeTableNodes().then((data: any) => this.setState({states: data}));;\n}\n\n/* getTreeTableNodes() {\n  return axios.get('/tree-table.json')\n          .then((res: any) => res.data.root);\n} */\n\ndataFormatterForTreeTable(stateDetails: any, districtDetails: any) {\n\nlet stateCount = 0;\nlet stateArr = [{}];\nstateDetails.forEach((stateObj: any) => {\n  let districtCount = 0;\n  let districtArr = [{}];  \n  districtDetails.forEach((value: any) => {\n    if (value.statecode === stateObj.statecode) {\n    Object.entries(value.districtData).forEach((districtDtls: any) => {\n      const districtObj = new districtModel(districtDtls[0], districtDtls[1].active, districtDtls[1].confirmed, districtDtls[1].recovered, districtDtls[1].deceased,\n        districtDtls[1].delta.confirmed, districtDtls[1].delta.recovered, districtDtls[1].delta.deceased);\n      const tempObj = {\n        'key' : stateCount+'-'+districtCount,\n        'data' : districtObj\n      }\n      districtArr.push(tempObj);\n      districtCount++;\n    })\n  }\n})\nconst stateData = new stateModel(stateObj.state, stateObj.active, stateObj.confirmed, stateObj.recovered, stateObj.deaths,\n            stateObj.deltaconfirmed, stateObj.deltarecovered, stateObj.deltadeaths);\ndistrictArr.splice(0,1);\nconst tempStateObj = {\n  'key' : stateCount,\n  'data' : stateData,\n  'children' : districtArr\n}\nstateArr.push(tempStateObj);\nstateCount++;\n})\nstateArr.splice(0,1);\nconst finalData = {\n  'root' : stateArr\n};\nthis.overallDetails = finalData.root.shift();\nfinalData.root.push(this.overallDetails);\nreturn finalData;\n\n}\n\nrender() {\n  return (\n    <Statewise states={this.state.states}/>\n    );\n  }\n}\n\n\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"primereact/resources/primereact.min.css\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primeicons/primeicons.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}