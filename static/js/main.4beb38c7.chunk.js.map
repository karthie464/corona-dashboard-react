{"version":3,"sources":["statewise/statewise.tsx","Model/districtModel.ts","Model/stateModel.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Statewise","value","this","props","states","field","header","sortable","filter","filterPlaceholder","filterMatchMode","filterFunction","filterMethod","expander","console","log","React","districtModel","name","active","confirmed","recovered","deaths","stateModel","App","state","fetch","headers","then","res","json","data","finalData","dataFormatterForTreeTable","Object","values","state_wise","setState","root","catch","stateDetails","stateCount","stateArr","forEach","stateObj","districtCount","districtArr","undefined","district","entries","districtObj","deceased","tempObj","push","stateData","splice","tempStateObj","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4beb38c7.chunk.js","sourcesContent":["import * as React from 'react';\n/* import Table from 'react-bootstrap/Table'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Districtwise from '../districtwise/districtwise' */\nimport {TreeTable} from 'primereact/treetable'\nimport { Column } from \"primereact/column\";\n/* import treeTab from '../sample.json'\nimport sampleModel from '../Model/sample-model' */\n\nclass Statewise extends React.Component<any, any>  {\n\n  public render() {\n    return (\n      <TreeTable value={this.props.states} >\n        <Column field=\"name\" header=\"State\" sortable filter={true} \n                filterPlaceholder={'State/District Name ...'} filterMatchMode=\"custom\" filterFunction={this.filterMethod}expander></Column>\n        <Column field=\"confirmed\" header=\"Confirmed\" sortable></Column>\n        <Column field=\"active\" header=\"Active\" sortable></Column>\n        <Column field=\"recovered\" header=\"Recovered\" sortable></Column>\n        <Column field=\"deaths\" header=\"Deceased\" sortable></Column>\n      </TreeTable>\n    );\n  }\n\n  public filterMethod(value: any, filter:any) {\n    console.log('value: '+ value + 'filter: ' + filter)\n  }\n}\n\nexport default Statewise;\n  ","class districtModel {\r\n    name: any;\r\n    active: any;\r\n    confirmed: any;\r\n    recovered: any;\r\n    deaths: any;\r\n\r\n    constructor(name: any, active: any, confirmed: any, recovered: any, deaths: any) {\r\n        this.name = name;\r\n        this.active = active;\r\n        this.confirmed = confirmed;\r\n        this.recovered = recovered;\r\n        this.deaths = deaths;\r\n    }\r\n}\r\nexport default districtModel;","class stateModel {\r\n    name: any;\r\n    active: any;\r\n    confirmed: any;\r\n    recovered: any;\r\n    deaths: any;\r\n\r\n    constructor(name: any, active: any, confirmed: any, recovered: any, deaths: any) {\r\n        this.name = name;\r\n        this.active = active;\r\n        this.confirmed = confirmed;\r\n        this.recovered = recovered;\r\n        this.deaths = deaths;\r\n        \r\n    }\r\n}\r\nexport default stateModel;","import React, { Component } from 'react'\nimport './App.css';\nimport Statewise from './statewise/statewise';\nimport districtModel from './Model/districtModel';\nimport stateModel from './Model/stateModel';\n/* import axios from 'axios';\nimport stateModel from './Model/stateModel'; */\n\nclass App extends Component {\n\n  state = {\n    states: []\n  }\n\ncomponentDidMount() {\n  // fetch('https://api.rootnet.in/covid19-in/unofficial/covid19india.org/statewise')\n  fetch('https://corona-virus-world-and-india-data.p.rapidapi.com/api_india', \n      {\n        headers: {\n          'x-rapidapi-host' : 'corona-virus-world-and-india-data.p.rapidapi.com',\n          'x-rapidapi-key' : 'eee03be7famsh0a4c97bce963450p17deacjsnf3979d5d6296'\n        }\n      })\n  .then(res => res.json())\n  .then((data) => {\n    console.log(data);\n    const finalData = this.dataFormatterForTreeTable(Object.values(data.state_wise));\n    this.setState({ states: finalData.root })\n  })\n  .catch(console.log)\n// this.getTreeTableNodes().then((data: any) => this.setState({states: data}));;\n}\n\n/* getTreeTableNodes() {\n  return axios.get('/tree-table.json')\n          .then((res: any) => res.data.root);\n} */\n\ndataFormatterForTreeTable(stateDetails: any) {\n\nlet stateCount = 0;\nlet stateArr = [{}];\nstateDetails.forEach((stateObj: any) => {\n  let districtCount = 0;\n  let districtArr = [{}];\nif (stateObj.district !== undefined) {  \n  Object.entries(stateObj.district).forEach((value: any) => {\n    const districtObj = new districtModel(value[0], value[1].active, value[1].confirmed, value[1].recovered, value[1].deceased)\n    const tempObj = {\n      'key' : stateCount+'-'+districtCount,\n      'data' : districtObj\n    }\n    districtArr.push(tempObj);\n    districtCount++;\n  })\n}\nconst stateData = new stateModel(stateObj.state, stateObj.active, stateObj.confirmed, stateObj.recovered, stateObj.deaths )\ndistrictArr.splice(0,1);\nconst tempStateObj = {\n  'key' : stateCount,\n  'data' : stateData,\n  'children' : districtArr\n}\nstateArr.push(tempStateObj);\nstateCount++;\n})\nstateArr.splice(0,1);\nconst finalData = {\n  'root' : stateArr\n};\n\nreturn finalData;\n\n}\n\nrender() {\n  return (\n    <Statewise states={this.state.states}/>\n    );\n  }\n}\n\n\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"primereact/resources/primereact.min.css\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primeicons/primeicons.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}